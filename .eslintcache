[{"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\index.js":"1","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\App.js":"2","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Charts.js":"3","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Navbar.js":"4","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\List.js":"5","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\fetch.js":"6","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Login.js":"7"},{"size":389,"mtime":1610248253211,"results":"8","hashOfConfig":"9"},{"size":3979,"mtime":1611477023900,"results":"10","hashOfConfig":"9"},{"size":5484,"mtime":1611476954808,"results":"11","hashOfConfig":"9"},{"size":1880,"mtime":1611479454160,"results":"12","hashOfConfig":"9"},{"size":5430,"mtime":1611476844218,"results":"13","hashOfConfig":"9"},{"size":2509,"mtime":1611474831516,"results":"14","hashOfConfig":"9"},{"size":9685,"mtime":1611479992440,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1snd5mq",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\index.js",[],["34","35"],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\App.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Charts.js",["36","37","38"],"import React, { useRef, useEffect, useState } from 'react'\r\nimport Chart from \"chart.js\";\r\nimport { useFetch } from './fetch';\r\nChart.defaults.global.defaultFontColor = \"white\";\r\n\r\nfunction map(value, a, b, c, d){\r\n    value = (value - a) / (b - a); // first map value from (a..b) to (0..1)\r\n    return Math.round(c + value * (d - c)); // then map it from (0..1) to (c..d) and return it\r\n}\r\n\r\nexport function PopularityChart({data}){\r\n    const canvasRef = useRef(null);\r\n    const basicPercent = (data.reduce((total, cur) => total + cur.popularity, 0) / data.length).toFixed(2);\r\n    useEffect(() => {\r\n        const popularityData = [], artistNames = [], colors = [];\r\n        const maxPopularity = data.reduce(( max, cur ) => Math.max( max, cur.popularity), 0);\r\n        const minPopularity = data.reduce(( min, cur ) => Math.min( min, cur.popularity), 100);\r\n        data.forEach(item => { //gather data on each item\r\n            popularityData.push(item.popularity);\r\n            artistNames.push(item.name);\r\n            const lightness = map(item.popularity, minPopularity, maxPopularity, 15, 70)\r\n            colors.push(`hsl(143, 75%, ${lightness}%)`);\r\n        });\r\n\r\n        const chart = new Chart(canvasRef.current, {\r\n            type: \"horizontalBar\",\r\n            data: {\r\n                datasets: [{\r\n                    data: popularityData,\r\n                    backgroundColor: colors,\r\n                    barThickness: \"flex\"\r\n                }],\r\n                labels: artistNames \r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: false\r\n                }\r\n            }\r\n        });\r\n        return () => chart.destroy();\r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"canvasContainer\">\r\n                <canvas style={{padding: '0 10px', paddingBottom: '3em'}} ref={canvasRef}/>\r\n            </div>\r\n            <div className=\"basicMeter\">\r\n                <h2>Damn, {basicPercent}% Basic</h2>\r\n            </div>\r\n        </>\r\n    )\r\n} //end of PopularityChart\r\n\r\n\r\nexport function RadarChart({data}){ //audio features only\r\n    const canvasRef = useRef(null);\r\n    const targetFeatures = ['danceability', 'energy', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence'];\r\n\r\n    function makeRadarChart(lables, dataPoints, minPoints, maxPoints){\r\n        const scaleColor = Array.isArray(data) ? 'rgb(255, 255, 255)' : 'rgb(0, 0, 0)';\r\n        const dataSets = [{\r\n            label: 'Average',\r\n            backgroundColor: `hsla(143, 75%, 50%, 0.5)`,\r\n            data: dataPoints\r\n        }];\r\n        if(minPoints) dataSets.push({\r\n            label: 'Minimun',\r\n            backgroundColor: `hsla(143, 75%, 80%, 0.5)`,\r\n            data: minPoints,\r\n        });\r\n        if(maxPoints) dataSets.push({\r\n            label: 'Maximun',\r\n            backgroundColor: `hsla(143, 75%, 15%, 0.5)`,\r\n            data: maxPoints,\r\n        });\r\n        const chart = new Chart(canvasRef.current, {\r\n            type: 'radar',\r\n            data: {\r\n                labels: lables.map(lable => lable.toUpperCase()),\r\n                datasets: dataSets\r\n            },\r\n            options: {\r\n                scale: {\r\n                    pointLabels: {\r\n                        fontColor: scaleColor\r\n                    },\r\n                    angleLines: {\r\n                        color: scaleColor\r\n                    },\r\n                    gridLines: {\r\n                        color: scaleColor\r\n                    },\r\n                    ticks: {\r\n                        backdropColor: 'rgb(0, 0, 0)',\r\n                        fontColor: 'rgb(255, 255, 255)'\r\n                    },\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: Array.isArray(data)\r\n                }\r\n            }\r\n        })\r\n        return () => chart.destroy();\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(Array.isArray(data)) {\r\n            const lables = Object.keys(data[0]).filter(key => targetFeatures.includes(key));\r\n            const averages = lables.map(lable => Math.round(data.reduce((total, current) => total + current[lable], 0) / data.length * 100));\r\n            const mins = lables.map(lable => Math.round(Math.min(...data.map(song => song[lable]))*100));\r\n            const maxs = lables.map(lable => Math.round(Math.max(...data.map(song => song[lable]))*100));\r\n            return makeRadarChart(lables, averages, mins, maxs)\r\n        }\r\n        else if(data.constructor === Object){\r\n            const lables = Object.keys(data).filter(key => targetFeatures.includes(key));\r\n            const values = lables.map(lable => Math.round(data[lable]*100))\r\n            return makeRadarChart(lables, values);\r\n        }\r\n    }, [data])\r\n    \r\n    return (\r\n        <div style={Array.isArray(data) ? {width: '100vw', height: '50vh', marginTop: '10px'} : {position: 'absolute', top: '10%', width: '100%', height: '60%',backgroundColor: 'rgba(255,255,255, 0.2)', backdropFilter: 'blur(300px)', zIndex: 0}}>\r\n            {/* {(!response || (Array.isArray(response) && response.length == 0)) && <div>...Loading</div>} */}\r\n            <canvas style={Array.isArray(data) ? {padding: '0 10px'} : {padding: '10px 10px'}} ref={canvasRef}/>\r\n        </div>\r\n    )\r\n} //end of RadarChart","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Navbar.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\List.js",["39","40","41","42"],"import React, {useState, useEffect} from 'react'\r\nimport {useFetch} from './fetch'\r\nimport { RadarChart } from './Charts';\r\n\r\nconst useAudio = url => {\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n  \r\n    useEffect(() => {\r\n       if(url) playing ? audio.play() : audio.pause();\r\n    }, [playing]);\r\n  \r\n    useEffect(() => {\r\n        if(url){\r\n            audio.addEventListener('ended', () => setPlaying(false));\r\n            return () => {\r\n                audio.pause();\r\n                audio.removeEventListener('ended', () => setPlaying(false));\r\n            };\r\n        }\r\n    }, [audio]);\r\n  \r\n    return [playing, setPlaying];\r\n};\r\n\r\nexport function SongList({songs, audioFeatures}){\r\n    const [isPlaying, setIsPlaying] = useState(true);\r\n    return (\r\n        <div onClick={() => setIsPlaying(!isPlaying)}>\r\n            {songs.map((song, i) => <SongListItem song={song} key={song.id} globalPlaying={isPlaying} audioFeature={audioFeatures[i]}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function SongListItem({song, rank, globalPlaying, audioFeature}){\r\n    const {album, name, artists, preview_url} = song;\r\n    const [playing, setPlaying] = useAudio(preview_url);\r\n    const [isClicked , setIsClicked] = useState(false);\r\n\r\n    const handleClick = () => setIsClicked(!isClicked)\r\n    useEffect(() => {\r\n       setPlaying(false);\r\n       setIsClicked(false);\r\n    }, [globalPlaying])\r\n    \r\n    useEffect(() => {\r\n        if(!globalPlaying && isClicked) setPlaying(true)\r\n    }, [isClicked])\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"listItem\"  onClick={handleClick}>\r\n            <div className={playing ? \"flipCardInner rotateItem\": \"flipCardInner\"}>\r\n                <div className=\"flipCardFront\">\r\n                    <img src={album.images[0].url} width=\"100%\" className=\"songImg\" alt=\"album cover\"/>\r\n                    <div className=\"listInfo\" style={playing ? {opacity: 0, transition: \"opacity .3s ease-in\"} : {transition: \"opacity .3s ease-in\"}}>\r\n                        {preview_url && <i style={{marginLeft: \"1em\", fontSize: \"clamp(20px, 3vw, 40px)\"}} className={!playing ? \"fas fa-play\" : \"fas fa-pause\"} />}\r\n                        <div style={{marginLeft: \"1em\", flexDirection: \"column\"}}>\r\n                            <h1>{name}</h1>\r\n                            <h2>By: {artists[0].name}</h2>\r\n                            <h2>Album: {album.name}</h2>\r\n                        </div>\r\n                        <h1 className=\"rank\">{rank && \"#\"+rank}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flipCardBack\">\r\n                    <img src={album.images[0].url} width=\"100%\" className=\"songImg\" alt=\"album cover\" style={{position:'relative', zIndex: 0}}/>\r\n                    <RadarChart data={audioFeature}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport function ArtistListItem({artist, rank}){\r\n    const {name, popularity, images, id, followers, genres} = artist;\r\n    const [isClicked, setIsClicked] = useState(false);\r\n    const relatedArtists = useFetch(`https://api.spotify.com/v1/artists/${id}/related-artists`)\r\n\r\n    return (\r\n        <>\r\n        <div onClick={() => setIsClicked(!isClicked)} className=\"listItem\">\r\n            <div className={!isClicked ? \"flipCardInner\" : \"flipCardInner rotateItem\"}>\r\n                <div className=\"flipCardFront\">\r\n                    \r\n                    <img src={images[0].url}  width=\"100%\" alt=\"artist\"/>\r\n                    <div className=\"listInfo\" style={isClicked ? {opacity: 0, transition: \"opacity .3s ease-in\"} : {transition: \"opacity .3s ease-in\"}} >\r\n                        <div style={{marginLeft: \"1em\", flexDirection: \"column\"}}>\r\n                            <h1>{name}</h1>\r\n                            <h2 style={{fontWeight: '500', textAlign: 'left'}}>More Info <i style={{color: \"#1DB954\"}} className=\"far fa-arrow-alt-circle-right\"></i></h2>\r\n                        </div>\r\n                        <h1 className=\"rank\">{rank && \"#\"+rank}</h1>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"flipCardBack\">\r\n\r\n                    <img src={images[0].url}  width=\"100%\" alt=\"artist\"/>\r\n                    <div className=\"backArtistInfo\">\r\n                        <h1 style={{fontWeight: '800'}}>{name}</h1>\r\n                        <h2>Followers: {followers.total}</h2>\r\n                        <h2>Popularity: {popularity} out of 100</h2>\r\n                        <div className=\"tables\" style={{display: 'flex', justifyContent: 'space-evenly'}}>\r\n                            <h2>Genres: \r\n                                <ul> \r\n                                    {genres.map((genre, index) => <li key={index}>{genre}</li>)} \r\n                                </ul>\r\n                            </h2>\r\n                            <h2 style={{whiteSpace:\"nowrap\", marginLeft: '5px'}}>Related Artists: \r\n                                <ul>\r\n                                    {relatedArtists ? relatedArtists.artists.map((a, index) => index < 5 && <li key={index}>{a.name}</li> ) : <div>Loading...</div>}\r\n                                </ul>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>  \r\n        </>\r\n    )\r\n}","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\fetch.js",["43","44","45","46"],"import {useState, useEffect} from 'react';\r\n\r\n\r\nconst afterHash = window.location.hash.substring(1); //get hash value from page url\r\nconst hashes = afterHash.split(\"&\").map(hash => hash.split(\"=\"))//split hash string into property, value pairs\r\nexport const accessToken = hashes[0][1]\r\n\r\n\r\n// export function useFetch(urlsOrUrl, dependencies = []){\r\n    \r\n//     const [worker] = useState(new Worker('./fetchWorker.js'))\r\n//     const [response, setResponse] = useState(Array.isArray(urlsOrUrl) ? [] : null);\r\n//     useEffect(() => {\r\n//         worker.postMessage({urlsOrUrl, accessToken});\r\n//         worker.onmessage = e => {\r\n//             setResponse(e.data);\r\n//         }\r\n//         console.log(worker)\r\n//     }, dependencies)\r\n//     return response;\r\n// }\r\n\r\n\r\n//console.log(new Worker('/fetchWorker.js'));\r\nexport function useFetch(urlsOrUrl, dependencies = []){\r\n    const [response, setResponse] = useState(Array.isArray(urlsOrUrl) ? [] : null);\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async (url) => {\r\n            let res;\r\n            try{\r\n                res = await fetch(url, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Accept\": \"application/json\",\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": \"Bearer \" + accessToken\r\n                    }\r\n                })\r\n                const json = await res.json(); \r\n                return json\r\n            }\r\n            catch(error){\r\n                console.warn(error);\r\n                if(res?.status == 503) return fetchData(url)\r\n                if(res?.status == 429){\r\n                    console.log('rate limited')\r\n                    setTimeout(fetchData, res.headers.get('Retry-After')*1000, url)\r\n                }\r\n            }\r\n        };\r\n        async function init(){\r\n            if(Array.isArray(urlsOrUrl)){\r\n                const responses = [];\r\n                for(let url of urlsOrUrl){\r\n                    const res = await fetchData(url);\r\n                    if(res) responses.push(res);\r\n                }\r\n                setResponse(responses);\r\n            }\r\n            else if(urlsOrUrl.constructor === String){\r\n                const res = await fetchData(urlsOrUrl)\r\n                if(res) setResponse(res);\r\n            }\r\n        }\r\n        if(urlsOrUrl && accessToken) init();\r\n        return () => setResponse(null);\r\n    }, dependencies);\r\n\r\n  return response;\r\n}\r\n\r\n","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Login.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":36,"nodeType":"53","messageId":"54","endLine":1,"endColumn":44},{"ruleId":"51","severity":1,"message":"55","line":3,"column":10,"nodeType":"53","messageId":"54","endLine":3,"endColumn":18},{"ruleId":"56","severity":1,"message":"57","line":125,"column":8,"nodeType":"58","endLine":125,"endColumn":14,"suggestions":"59"},{"ruleId":"56","severity":1,"message":"60","line":11,"column":8,"nodeType":"58","endLine":11,"endColumn":17,"suggestions":"61"},{"ruleId":"56","severity":1,"message":"62","line":21,"column":8,"nodeType":"58","endLine":21,"endColumn":15,"suggestions":"63"},{"ruleId":"56","severity":1,"message":"64","line":44,"column":8,"nodeType":"58","endLine":44,"endColumn":23,"suggestions":"65"},{"ruleId":"56","severity":1,"message":"66","line":48,"column":8,"nodeType":"58","endLine":48,"endColumn":19,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":45,"column":32,"nodeType":"70","messageId":"71","endLine":45,"endColumn":34},{"ruleId":"68","severity":1,"message":"69","line":46,"column":32,"nodeType":"70","messageId":"71","endLine":46,"endColumn":34},{"ruleId":"56","severity":1,"message":"72","line":68,"column":8,"nodeType":"53","endLine":68,"endColumn":20},{"ruleId":"56","severity":1,"message":"73","line":68,"column":8,"nodeType":"53","endLine":68,"endColumn":20,"suggestions":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useFetch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'makeRadarChart' and 'targetFeatures'. Either include them or remove the dependency array.","ArrayExpression",["77"],"React Hook useEffect has missing dependencies: 'audio' and 'url'. Either include them or remove the dependency array.",["78"],"React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["79"],"React Hook useEffect has a missing dependency: 'setPlaying'. Either include it or remove the dependency array.",["80"],"React Hook useEffect has missing dependencies: 'globalPlaying' and 'setPlaying'. Either include them or remove the dependency array.",["81"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'urlsOrUrl'. Either include it or remove the dependency array.",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [data, makeRadarChart, targetFeatures]",{"range":"95","text":"96"},"Update the dependencies array to be: [audio, playing, url]",{"range":"97","text":"98"},"Update the dependencies array to be: [audio, url]",{"range":"99","text":"100"},"Update the dependencies array to be: [globalPlaying, setPlaying]",{"range":"101","text":"102"},"Update the dependencies array to be: [globalPlaying, isClicked, setPlaying]",{"range":"103","text":"104"},"Update the dependencies array to be: [urlsOrUrl]",{"range":"105","text":"106"},[4936,4942],"[data, makeRadarChart, targetFeatures]",[342,351],"[audio, playing, url]",[643,650],"[audio, url]",[1430,1445],"[globalPlaying, setPlaying]",[1542,1553],"[globalPlaying, isClicked, setPlaying]",[2466,2478],"[urlsOrUrl]"]
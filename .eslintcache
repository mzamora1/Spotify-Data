[{"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\index.js":"1","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\App.js":"2","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\Login.js":"3","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\UserProfile.js":"4","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\Navbar.js":"5","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\TopUserItems.js":"6","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\PopularityChart.js":"7","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\List.js":"8","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\index.js":"9","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\App.js":"10","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Navbar.js":"11","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\TopUserItems.js":"12","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Login.js":"13","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\List.js":"14","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\PopularityChart.js":"15","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Reccomendations.js":"16","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Charts.js":"17","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\fetch.js":"18"},{"size":433,"mtime":1608052729455,"results":"19","hashOfConfig":"20"},{"size":1956,"mtime":1608326960403,"results":"21","hashOfConfig":"20"},{"size":9470,"mtime":1608327472402,"results":"22","hashOfConfig":"20"},{"size":206,"mtime":1608328425365,"results":"23","hashOfConfig":"20"},{"size":824,"mtime":1608093864090,"results":"24","hashOfConfig":"20"},{"size":2812,"mtime":1608328073732,"results":"25","hashOfConfig":"20"},{"size":2756,"mtime":1608329202270,"results":"26","hashOfConfig":"20"},{"size":1921,"mtime":1608329604237,"results":"27","hashOfConfig":"20"},{"size":389,"mtime":1610248253211,"results":"28","hashOfConfig":"29"},{"size":4018,"mtime":1610320816690,"results":"30","hashOfConfig":"29"},{"size":1803,"mtime":1610320796560,"results":"31","hashOfConfig":"29"},{"size":3777,"mtime":1608597593339,"results":"32","hashOfConfig":"29"},{"size":9685,"mtime":1610342969493,"results":"33","hashOfConfig":"29"},{"size":5067,"mtime":1610342721751,"results":"34","hashOfConfig":"29"},{"size":1458,"mtime":1609797866437,"results":"35","hashOfConfig":"29"},{"size":823,"mtime":1610231382358,"results":"36","hashOfConfig":"29"},{"size":5514,"mtime":1610317465729,"results":"37","hashOfConfig":"29"},{"size":2239,"mtime":1610347167392,"results":"38","hashOfConfig":"29"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"15vabdr",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1snd5mq",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\index.js",[],["80","81"],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\App.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\Login.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\UserProfile.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\Navbar.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\TopUserItems.js",["82","83","84"],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\PopularityChart.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\List.js",["85","86","87"],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\index.js",[],["88","89"],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\App.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Navbar.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\TopUserItems.js",["90","91","92"],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Login.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\List.js",["93","94","95","96"],"import React, {useState, useEffect} from 'react'\r\nimport {useFetch} from './fetch'\r\nimport { RadarChart } from './Charts';\r\n\r\nconst useAudio = url => {\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n  \r\n    useEffect(() => {\r\n       if(url) playing ? audio.play() : audio.pause();\r\n    }, [playing]);\r\n  \r\n    useEffect(() => {\r\n        if(url){\r\n            audio.addEventListener('ended', () => setPlaying(false));\r\n            return () => {\r\n                audio.pause();\r\n                audio.removeEventListener('ended', () => setPlaying(false));\r\n            };\r\n        }\r\n    }, [audio]);\r\n  \r\n    return [playing, setPlaying];\r\n};\r\n\r\n\r\nexport function SongListItem({song, rank, globalPlaying}){\r\n    const {album, name, artists, preview_url} = song;\r\n    const [playing, setPlaying] = useAudio(preview_url);\r\n    const [isClicked , setIsClicked] = useState(false);\r\n\r\n    const handleClick = () => setIsClicked(!isClicked)\r\n    useEffect(() => {\r\n       setPlaying(false);\r\n       setIsClicked(false);\r\n    }, [globalPlaying])\r\n    \r\n    useEffect(() => {\r\n        if(!globalPlaying && isClicked) setPlaying(true)\r\n    }, [isClicked])\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"listItem\"  onClick={handleClick}>\r\n            <div className={playing ? \"flipCardInner rotateItem\": \"flipCardInner\"}>\r\n                <div className=\"flipCardFront\">\r\n                    <img src={album.images[0].url} width=\"100%\" className=\"songImg\" alt=\"album cover\"/>\r\n                    <div className=\"listInfo\" style={playing ? {opacity: 0, transition: \"opacity .3s ease-in\"} : {transition: \"opacity .3s ease-in\"}}>\r\n                        {preview_url && <i style={{marginLeft: \"1em\", fontSize: \"clamp(20px, 3vw, 40px)\"}} className={!playing ? \"fas fa-play\" : \"fas fa-pause\"} />}\r\n                        <div style={{marginLeft: \"1em\", flexDirection: \"column\"}}>\r\n                            <h1>{name}</h1>\r\n                            <h2>By: {artists[0].name}</h2>\r\n                            <h2>Album: {album.name}</h2>\r\n                        </div>\r\n                        <h1 className=\"rank\">{rank && \"#\"+rank}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flipCardBack\">\r\n                    <img src={album.images[0].url} width=\"100%\" className=\"songImg\" alt=\"album cover\" style={{position:'relative', zIndex: 0}}/>\r\n                    <RadarChart data={song}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport function ArtistListItem({artist, rank}){\r\n    const {name, popularity, images, id, followers, genres} = artist;\r\n    const [isClicked, setIsClicked] = useState(false);\r\n    const relatedArtists = useFetch(`https://api.spotify.com/v1/artists/${id}/related-artists`)\r\n\r\n    return (\r\n        <>\r\n        <div onClick={() => setIsClicked(!isClicked)} className=\"listItem\">\r\n            <div className={!isClicked ? \"flipCardInner\" : \"flipCardInner rotateItem\"}>\r\n                <div className=\"flipCardFront\">\r\n                    \r\n                    <img src={images[0].url}  width=\"100%\" alt=\"artist\"/>\r\n                    <div className=\"listInfo\" style={isClicked ? {opacity: 0, transition: \"opacity .3s ease-in\"} : {transition: \"opacity .3s ease-in\"}} >\r\n                        <div style={{marginLeft: \"1em\", flexDirection: \"column\"}}>\r\n                            <h1>{name}</h1>\r\n                            <h2 style={{fontWeight: '500', textAlign: 'left'}}>More Info <i style={{color: \"#1DB954\"}} className=\"far fa-arrow-alt-circle-right\"></i></h2>\r\n                        </div>\r\n                        <h1 className=\"rank\">{rank && \"#\"+rank}</h1>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"flipCardBack\">\r\n\r\n                    <img src={images[0].url}  width=\"100%\" alt=\"artist\"/>\r\n                    <div className=\"backArtistInfo\">\r\n                        <h1 style={{fontWeight: '800'}}>{name}</h1>\r\n                        <h2>Followers: {followers.total}</h2>\r\n                        <h2>Popularity: {popularity} out of 100</h2>\r\n                        <div className=\"tables\" style={{display: 'flex', justifyContent: 'space-evenly'}}>\r\n                            <h2>Genres: \r\n                                <ul> \r\n                                    {genres.map((genre, index) => <li key={index}>{genre}</li>)} \r\n                                </ul>\r\n                            </h2>\r\n                            <h2 style={{whiteSpace:\"nowrap\", marginLeft: '5px'}}>Related Artists: \r\n                                <ul>\r\n                                    {relatedArtists ? relatedArtists.artists.map((a, index) => index < 5 && <li key={index}>{a.name}</li> ) : <div>Loading...</div>}\r\n                                </ul>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>  \r\n        </>\r\n    )\r\n}","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\PopularityChart.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Reccomendations.js",[],["97","98"],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Charts.js",["99","100","101"],"import React, { useRef, useEffect, useState } from 'react'\r\nimport Chart from \"chart.js\";\r\nimport { useFetch } from './fetch';\r\nChart.defaults.global.defaultFontColor = \"white\";\r\n\r\nfunction map(value, a, b, c, d){\r\n    value = (value - a) / (b - a); // first map value from (a..b) to (0..1)\r\n    return Math.round(c + value * (d - c)); // then map it from (0..1) to (c..d) and return it\r\n}\r\n\r\nexport function PopularityChart({data}){\r\n    const canvasRef = useRef(null);\r\n    useEffect(() => {\r\n        const popularityData = [], artistNames = [], colors = [];\r\n        const maxPopularity = data.reduce(( max, cur ) => Math.max( max, cur.popularity), 0);\r\n        const minPopularity = data.reduce(( min, cur ) => Math.min( min, cur.popularity), 100);\r\n        data.forEach(item => { //gather data on each item\r\n            popularityData.push(item.popularity);\r\n            artistNames.push(item.name);\r\n            const lightness = map(item.popularity, minPopularity, maxPopularity, 15, 70)\r\n            colors.push(`hsl(143, 75%, ${lightness}%)`);\r\n        });\r\n\r\n        const chart = new Chart(canvasRef.current, {\r\n            type: \"horizontalBar\",\r\n            data: {\r\n                datasets: [{\r\n                    data: popularityData,\r\n                    backgroundColor: colors,\r\n                    barThickness: \"flex\"\r\n                }],\r\n                labels: artistNames \r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: false\r\n                }\r\n            }\r\n        });\r\n        return () => chart.destroy();\r\n    }, [data])\r\n\r\n    return (\r\n        <div className=\"canvasContainer\">\r\n            <canvas style={{padding: '0 10px', paddingBottom: '3em'}} ref={canvasRef}/>\r\n        </div>\r\n    )\r\n} //end of PopularityChart\r\n\r\n\r\nexport function RadarChart({data}){ //tracks only\r\n    const canvasRef = useRef(null);\r\n    const targetFeatures = ['danceability', 'energy', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence'];\r\n    const url = \"https://api.spotify.com/v1/audio-features/\";\r\n    const response = useFetch(Array.isArray(data) ? data.map(song => url + song.id) : url + data.id);\r\n    \r\n    function makeRadarChart(lables, dataPoints, minPoints, maxPoints){\r\n        const scaleColor = Array.isArray(data) ? 'rgb(255, 255, 255)' : 'rgb(0, 0, 0)';\r\n        const dataSets = [{\r\n            label: 'Average',\r\n            backgroundColor: `hsla(143, 75%, 50%, 0.5)`,\r\n            data: dataPoints\r\n        }];\r\n        if(minPoints) dataSets.push({\r\n            label: 'Minimun',\r\n            backgroundColor: `hsla(143, 75%, 80%, 0.5)`,\r\n            data: minPoints,\r\n        });\r\n        if(maxPoints) dataSets.push({\r\n            label: 'Maximun',\r\n            backgroundColor: `hsla(143, 75%, 15%, 0.5)`,\r\n            data: maxPoints,\r\n        });\r\n        const chart = new Chart(canvasRef.current, {\r\n            type: 'radar',\r\n            data: {\r\n                labels: lables.map(lable => lable.toUpperCase()),\r\n                datasets: dataSets\r\n            },\r\n            options: {\r\n                scale: {\r\n                    pointLabels: {\r\n                        fontColor: scaleColor\r\n                    },\r\n                    angleLines: {\r\n                        color: scaleColor\r\n                    },\r\n                    gridLines: {\r\n                        color: scaleColor\r\n                    },\r\n                    ticks: {\r\n                        backdropColor: 'rgb(0, 0, 0)',\r\n                        fontColor: 'rgb(255, 255, 255)'\r\n                    },\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: Array.isArray(data)\r\n                }\r\n            }\r\n        })\r\n        return () => chart.destroy();\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(Array.isArray(response) && response.length > 1 && response[0]) {\r\n            const lables = Object.keys(response[0]).filter(key => targetFeatures.includes(key));\r\n            const averages = lables.map(lable => Math.round(response.reduce((total, current) => total + current[lable], 0) / response.length * 100));\r\n            const minValues = lables.map(lable => Math.round(response.reduce((min, cur) => Math.min(min, cur[lable]), 100) * 100));\r\n            const maxValues = lables.map(lable => Math.round(response.reduce((max, cur) => Math.max(max, cur[lable]), 0) * 100));\r\n            return makeRadarChart(lables, averages, minValues, maxValues)\r\n        }\r\n        else if(response && response.constructor === Object){\r\n            const lables = Object.keys(response).filter(key => targetFeatures.includes(key));\r\n            const values = lables.map(lable => Math.round(response[lable]*100))\r\n            return makeRadarChart(lables, values);\r\n        }\r\n    }, [response])\r\n\r\n    return (\r\n        <div style={Array.isArray(data) ? {width: '100vw', height: '50vh', marginTop: '10px'} : {position: 'absolute', top: '10%', width: '100%', height: '60%',backgroundColor: 'rgba(255,255,255, 0.2)', backdropFilter: 'blur(300px)', zIndex: 0}}>\r\n            {(!response || (Array.isArray(response) && response.length == 0)) && <div>...Loading</div>}\r\n            <canvas style={Array.isArray(data) ? {padding: '0 10px'} : {padding: '10px 10px'}} ref={canvasRef}/>\r\n        </div>\r\n    )\r\n} //end of RadarChart","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\fetch.js",["102","103"],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":16,"nodeType":"110","messageId":"111","endLine":1,"endColumn":24},{"ruleId":"108","severity":1,"message":"112","line":1,"column":26,"nodeType":"110","messageId":"111","endLine":1,"endColumn":35},{"ruleId":"108","severity":1,"message":"113","line":4,"column":10,"nodeType":"110","messageId":"111","endLine":4,"endColumn":16},{"ruleId":"108","severity":1,"message":"114","line":37,"column":18,"nodeType":"110","messageId":"111","endLine":37,"endColumn":28},{"ruleId":"108","severity":1,"message":"115","line":37,"column":38,"nodeType":"110","messageId":"111","endLine":37,"endColumn":40},{"ruleId":"116","severity":1,"message":"117","line":41,"column":13,"nodeType":"118","endLine":41,"endColumn":94},{"ruleId":"104","replacedBy":"119"},{"ruleId":"106","replacedBy":"120"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":16,"nodeType":"110","messageId":"111","endLine":1,"endColumn":24},{"ruleId":"108","severity":1,"message":"112","line":1,"column":26,"nodeType":"110","messageId":"111","endLine":1,"endColumn":35},{"ruleId":"108","severity":1,"message":"113","line":4,"column":10,"nodeType":"110","messageId":"111","endLine":4,"endColumn":16},{"ruleId":"121","severity":1,"message":"122","line":11,"column":8,"nodeType":"123","endLine":11,"endColumn":17,"suggestions":"124"},{"ruleId":"121","severity":1,"message":"125","line":21,"column":8,"nodeType":"123","endLine":21,"endColumn":15,"suggestions":"126"},{"ruleId":"121","severity":1,"message":"127","line":36,"column":8,"nodeType":"123","endLine":36,"endColumn":23,"suggestions":"128"},{"ruleId":"121","severity":1,"message":"129","line":40,"column":8,"nodeType":"123","endLine":40,"endColumn":19,"suggestions":"130"},{"ruleId":"104","replacedBy":"131"},{"ruleId":"106","replacedBy":"132"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":36,"nodeType":"110","messageId":"111","endLine":1,"endColumn":44},{"ruleId":"121","severity":1,"message":"133","line":121,"column":8,"nodeType":"123","endLine":121,"endColumn":18,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":125,"column":72,"nodeType":"137","messageId":"138","endLine":125,"endColumn":74},{"ruleId":"121","severity":1,"message":"139","line":65,"column":8,"nodeType":"110","endLine":65,"endColumn":20},{"ruleId":"121","severity":1,"message":"140","line":65,"column":8,"nodeType":"110","endLine":65,"endColumn":20,"suggestions":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'render' is defined but never used.","'popularity' is assigned a value but never used.","'id' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["142"],["143"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'audio' and 'url'. Either include them or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has a missing dependency: 'setPlaying'. Either include it or remove the dependency array.",["146"],"React Hook useEffect has missing dependencies: 'globalPlaying' and 'setPlaying'. Either include them or remove the dependency array.",["147"],["142"],["143"],"React Hook useEffect has missing dependencies: 'makeRadarChart' and 'targetFeatures'. Either include them or remove the dependency array.",["148"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'urlsOrUrl'. Either include it or remove the dependency array.",["149"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [audio, playing, url]",{"range":"162","text":"163"},"Update the dependencies array to be: [audio, url]",{"range":"164","text":"165"},"Update the dependencies array to be: [globalPlaying, setPlaying]",{"range":"166","text":"167"},"Update the dependencies array to be: [globalPlaying, isClicked, setPlaying]",{"range":"168","text":"169"},"Update the dependencies array to be: [makeRadarChart, response, targetFeatures]",{"range":"170","text":"171"},"Update the dependencies array to be: [urlsOrUrl]",{"range":"172","text":"173"},[342,351],"[audio, playing, url]",[643,650],"[audio, url]",[1075,1090],"[globalPlaying, setPlaying]",[1187,1198],"[globalPlaying, isClicked, setPlaying]",[4974,4984],"[makeRadarChart, response, targetFeatures]",[2081,2093],"[urlsOrUrl]"]
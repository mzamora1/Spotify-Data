[{"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\index.js":"1","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\App.js":"2","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\Login.js":"3","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\UserProfile.js":"4","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\Navbar.js":"5","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\TopUserItems.js":"6","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\PopularityChart.js":"7","C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\List.js":"8","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\index.js":"9","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\App.js":"10","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Navbar.js":"11","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\TopUserItems.js":"12","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Login.js":"13","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\List.js":"14","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\PopularityChart.js":"15","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Reccomendations.js":"16","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Charts.js":"17"},{"size":433,"mtime":1608052729455,"results":"18","hashOfConfig":"19"},{"size":1956,"mtime":1608326960403,"results":"20","hashOfConfig":"19"},{"size":9470,"mtime":1608327472402,"results":"21","hashOfConfig":"19"},{"size":206,"mtime":1608328425365,"results":"22","hashOfConfig":"19"},{"size":824,"mtime":1608093864090,"results":"23","hashOfConfig":"19"},{"size":2812,"mtime":1608328073732,"results":"24","hashOfConfig":"19"},{"size":2756,"mtime":1608329202270,"results":"25","hashOfConfig":"19"},{"size":1921,"mtime":1608329604237,"results":"26","hashOfConfig":"19"},{"size":435,"mtime":1608802041082,"results":"27","hashOfConfig":"28"},{"size":4102,"mtime":1609920620346,"results":"29","hashOfConfig":"28"},{"size":1555,"mtime":1608802243789,"results":"30","hashOfConfig":"28"},{"size":3777,"mtime":1608597593339,"results":"31","hashOfConfig":"28"},{"size":9685,"mtime":1609798813809,"results":"32","hashOfConfig":"28"},{"size":5135,"mtime":1609920934391,"results":"33","hashOfConfig":"28"},{"size":1458,"mtime":1609797866437,"results":"34","hashOfConfig":"28"},{"size":821,"mtime":1609802116033,"results":"35","hashOfConfig":"28"},{"size":6001,"mtime":1609925137527,"results":"36","hashOfConfig":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"15vabdr",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1snd5mq",{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\index.js",[],["76","77"],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\App.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\Login.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\UserProfile.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\Navbar.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\TopUserItems.js",["78","79","80"],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\PopularityChart.js",[],"C:\\Users\\Michael\\OneDrive\\Spotify-Data\\spotify-data\\src\\List.js",["81","82","83"],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\index.js",[],["84","85"],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\App.js",["86","87"],"import React, {useState, useEffect} from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport Login from \"./Login\";\nimport Reccomendations from \"./Reccomendations\";\nimport './App.css';\nimport {PopularityChart, RadarChart} from \"./Charts\";\nimport {SongListItem, ArtistListItem} from \"./List\"\nconst afterHash = window.location.hash.substring(1); //get hash value from page url\nconst hashes = afterHash.split(\"&\").map(hash => hash.split(\"=\"))//split hash string into property, value pairs\nconst accessToken = hashes[0][1]\n\nexport function useFetch(url, dependencies = []){\n  const [response, setResponse] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try{\n        const res = await fetch(url, {\n          method: \"GET\",\n          headers: {\n          \"Authorization\": \"Bearer \" + accessToken,\n          }\n        });\n        let json = await res.json();\n        setResponse(json);\n        return json\n      }\n      catch(error){\n        console.error(error);\n      }\n    };\n    if(url && accessToken) {\n      fetchData().then((res) => {\n        if(!res) fetchData();\n      });\n    }\n    return () => setResponse(null);\n  }, dependencies);\n\n  return response;\n}\n\nexport function App() {\n  const [timeRange, setTimeRange] = useState(\"medium_term\");\n  const handleClick = (event) => setTimeRange(event.target.id);\n  const songs = useFetch(`https://api.spotify.com/v1/me/top/tracks?time_range=${timeRange}`, [timeRange]);\n  const artists = useFetch(`https://api.spotify.com/v1/me/top/artists?time_range=${timeRange}`, [timeRange]);\n\n  if(!accessToken) return <Login />;\n  else return (\n    artists && songs ? (//if data has been recieved\n      <Router basename=\"/Spotify-Data\">\n        <div style={{overflow: \"hidden\", textAlign: 'center', color: \"white\"}}>\n          <Navbar/>\n          <Switch>\n            <Route exact path={[\"/\"]} >\n                <div className=\"timeRange\">\n                  <h1>Select a time range</h1>\n                  <div style={{}}>\n                    <p>Based off of your streams from the past 4 weeks</p>\n                    <Link id=\"short_term\" onClick={handleClick} to=\"/topArtists\">Short Term</Link>\n                    <p>Based off of your streams from the past 6 months</p>\n                    <Link id=\"medium_term\" onClick={handleClick} to=\"/topArtists\">Medium Term</Link>\n                    <p>Based off of your all time streams, could be several years</p>\n                    <Link id=\"long_term\" onClick={handleClick} to=\"/topArtists\">Long Term</Link>\n                  </div>\n                  \n                </div>\n            </Route>\n            <Route exact path=\"/topSongs\" >\n              <div style={{marginTop: \"calc(80px + 1em)\"}}>\n                <h1 >Your Top {songs.items.length} Tracks Ranked By Popularity</h1>\n                <PopularityChart data={songs.items}/>\n                <h1 >Your Music Taste</h1>\n                <RadarChart data={songs.items} accessToken={accessToken}/>\n                <h1 style={{margin: '1em 0'}}>Your Top {songs.items.length} Songs In Order</h1>\n                {songs.items.map((data, index) => <SongListItem song={data} key={data.id} rank={index+1}/>)}\n              </div>\n            </Route>\n            <Route path=\"/topArtists\">\n              <div style={{marginTop: \"calc(80px + 1em)\"}}>\n                <h1 >Your Top {artists.items.length} Artists Ranked By Popularity</h1>\n                <PopularityChart data={artists.items}/>\n                <h1 style={{margin: '1em 0'}}>Your Top {artists.items.length} Artists In Order</h1>\n                {artists.items.map((data, index) => <ArtistListItem artist={data} key={data.id} rank={index+1}/>)}\n              </div>\n            </Route>\n            <Route path=\"/reccomendations\">\n              <Reccomendations songs={songs} artists={artists}/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    )\n    : (//else display loading page\n      <div className=\"loading\">\n        Loading...\n      </div>\n    )\n  );\n}\n\n","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Navbar.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\TopUserItems.js",["88","89","90"],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Login.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\List.js",["91","92"],"import React, {useState, useEffect} from 'react'\r\nimport {useFetch} from './App'\r\nimport { RadarChart } from './Charts';\r\n\r\nconst useAudio = url => {\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n    const togglePlaying = () => setPlaying(!playing);\r\n  \r\n    useEffect(() => {\r\n       if(url) playing ? audio.play() : audio.pause();\r\n    }, [playing]);\r\n  \r\n    useEffect(() => {\r\n        if(url){\r\n            audio.addEventListener('ended', () => setPlaying(false));\r\n            return () => {\r\n                audio.removeEventListener('ended', () => setPlaying(false));\r\n            };\r\n        }\r\n    }, [audio]);\r\n  \r\n    return [playing, togglePlaying];\r\n};\r\n\r\nexport function SongListItem(props){\r\n    const {album, name, artists, preview_url, id} = props.song;\r\n    const [playing, togglePlaying] = useAudio(preview_url);\r\n    const [isClicked, setIsClicked] = useState(false);\r\n    const analysis = useFetch(\"https://api.spotify.com/v1/audio-features/\"+id);\r\n    function handleClick(){\r\n        togglePlaying();\r\n        setIsClicked(!isClicked);\r\n    }\r\n    useEffect(() => {\r\n        if(!playing) setIsClicked(false);\r\n    }, [playing])\r\n    return (\r\n        <>\r\n        <div className=\"listItem\"  onClick={handleClick}>\r\n            <div className={!isClicked || !playing ? \"flipCardInner\" : \"flipCardInner rotateItem\"}>\r\n                <div className=\"flipCardFront\">\r\n                    <img src={album.images[0].url} width=\"100%\" className=\"songImg\" alt=\"album cover\"/>\r\n                    <div className=\"listInfo\" style={isClicked && playing ? {opacity: 0, transition: \"opacity .3s ease-in\"} : {transition: \"opacity .3s ease-in\"}}>\r\n                        {preview_url && <i style={{marginLeft: \"1em\", fontSize: \"clamp(20px, 3vw, 40px)\"}} className={!playing ? \"fas fa-play\" : \"fas fa-pause\"} />}\r\n                        <div style={{marginLeft: \"1em\", flexDirection: \"column\"}}>\r\n                            <h1>{name}</h1>\r\n                            <h2>By: {artists[0].name}</h2>\r\n                            <h2>Album: {album.name}</h2>\r\n                        </div>\r\n                        <h1 className=\"rank\">{props.rank && \"#\"+props.rank}</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flipCardBack\">\r\n                    <img src={album.images[0].url} width=\"100%\" className=\"songImg\" alt=\"album cover\"/>\r\n                    {analysis && <RadarChart data={analysis}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport function ArtistListItem(props){\r\n    const {name, popularity, images, id, followers, genres} = props.artist;\r\n    const [isClicked, setIsClicked] = useState(false);\r\n    const url = `https://api.spotify.com/v1/artists/${id}/related-artists`;\r\n    const relatedArtists = useFetch(url)\r\n    if(!relatedArtists) return <div>Loading...</div>\r\n    return (\r\n        <>\r\n        <div onClick={() => setIsClicked(!isClicked)} className=\"listItem\">\r\n            <div className={!isClicked ? \"flipCardInner\" : \"flipCardInner rotateItem\"}>\r\n                <div className=\"flipCardFront\">\r\n                    \r\n                    <img src={images[0].url}  width=\"100%\" alt=\"artist\"/>\r\n                    <div className=\"listInfo\" style={isClicked ? {opacity: 0, transition: \"opacity .3s ease-in\"} : {transition: \"opacity .3s ease-in\"}} >\r\n                        <div style={{marginLeft: \"1em\", flexDirection: \"column\"}}>\r\n                            <h1>{name}</h1>\r\n                            <h2 style={{fontWeight: '500', textAlign: 'left'}}>More Info <i style={{color: \"#1DB954\"}} className=\"far fa-arrow-alt-circle-right\"></i></h2>\r\n                        </div>\r\n                        <h1 className=\"rank\">{props.rank && \"#\"+props.rank}</h1>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"flipCardBack\">\r\n\r\n                    <img src={images[0].url}  width=\"100%\" alt=\"artist\"/>\r\n                    <div className=\"backArtistInfo\">\r\n                        <h1 style={{fontWeight: '800'}}>{name}</h1>\r\n                        <h2>Followers: {followers.total}</h2>\r\n                        <h2>Popularity: {popularity} out of 100</h2>\r\n                        <div className=\"tables\" style={{display: 'flex', justifyContent: 'space-evenly'}}>\r\n                            <h2>Genres: \r\n                                <ul> \r\n                                    {genres.map((genre, index) => <li key={index}>{genre}</li>)} \r\n                                </ul>\r\n                            </h2>\r\n                            <h2 style={{whiteSpace:\"nowrap\", marginLeft: '5px'}}>Related Artists: \r\n                                <ul>\r\n                                    {relatedArtists.artists.map((artist, index) => index < 5 && <li key={index}>{artist.name}</li>)}\r\n                                </ul>\r\n                            </h2>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>  \r\n        </>\r\n    )\r\n}","C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\PopularityChart.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Reccomendations.js",[],"C:\\Users\\Michael\\Documents\\GitHub\\Spotify-Data\\src\\Charts.js",["93","94"],"import React, { useRef, useEffect, useState } from 'react'\r\nimport Chart from \"chart.js\";\r\nChart.defaults.global.defaultFontColor = \"white\";\r\n\r\nfunction map(value, a, b, c, d){\r\n    value = (value - a) / (b - a); // first map value from (a..b) to (0..1)\r\n    return Math.round(c + value * (d - c)); // then map it from (0..1) to (c..d) and return it\r\n}\r\n\r\nexport function PopularityChart(props){\r\n    const canvasRef = useRef(null);\r\n    useEffect(() => {\r\n        const popularityData = [], artistNames = [], colors = [];\r\n        let lightness;\r\n        props.data.forEach(artist => { //gather data on each item\r\n            popularityData.push(artist.popularity);\r\n            artistNames.push(artist.name);\r\n            lightness = map(artist.popularity, 30, 95, 8, 70)\r\n            colors.push(`hsl(143, 75%, ${lightness}%)`);\r\n            //colors.push(`rgba(${Math.random()*256}, ${Math.random()*256}, ${Math.random()*256}, 0.7)`)\r\n        });\r\n\r\n        const chart = new Chart(canvasRef.current, {\r\n            type: \"horizontalBar\",\r\n            data: {\r\n                datasets: [{\r\n                    data: popularityData,\r\n                    backgroundColor: colors,\r\n                    barThickness: \"flex\"\r\n                }],\r\n                labels: artistNames \r\n            },\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: false\r\n                }\r\n            }\r\n        });\r\n        return () => chart.destroy();\r\n    })\r\n\r\n    return (\r\n        <div className=\"canvasContainer\">\r\n            <canvas style={{padding: '0 10px', paddingBottom: '3em'}} ref={canvasRef}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nArray.prototype.average = function(prop) {\r\n    let total = 0\r\n    for (let i = 0; i < this.length; i++) {\r\n       if(typeof this[i] == 'object') total += this[i][prop]\r\n       else throw new Error(`${this[i]} is not an object`);\r\n    }\r\n    return Math.round((total / this.length)*100);\r\n}\r\n\r\nexport function RadarChart({data, accessToken}){ //tracks only\r\n    const canvasRef = useRef(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    async function fetchData(url){\r\n        try{\r\n            const response = await fetch(url,{\r\n                method: \"GET\",\r\n                headers: {\r\n                \"Authorization\": \"Bearer \" + accessToken,\r\n                }\r\n            })\r\n            const json = await response.json()\r\n            return json;\r\n        }\r\n        catch(error){\r\n            console.error(error);\r\n            return error;\r\n        }\r\n    }\r\n    \r\n    async function averageData(){\r\n        const audioFeatures = [], lables = [], averages = [];\r\n        const url = \"https://api.spotify.com/v1/audio-features/\";\r\n        for(let song of data){//gather audioFeatures from top songs\r\n            let feature = await fetchData(url + song.id);\r\n            audioFeatures.push(feature);\r\n        }\r\n        for(let feature in audioFeatures[0]){\r\n            if(!lables.includes(feature) && audioFeatures[0][feature] < 1 && audioFeatures[0][feature] > 0){\r\n                lables.push(feature);\r\n            }\r\n        }\r\n        for(let lable of lables){ //calc averages of those lables\r\n            averages.push(audioFeatures.average(lable));\r\n        }\r\n        console.log(lables)\r\n        console.log(averages);\r\n        return {lables, averages}\r\n        \r\n    }\r\n    function makeRadarChart(lables, dataPoints){\r\n        let scaleColor = accessToken ? 'rgb(255, 255, 255)' : 'rgb(0, 0, 0)';\r\n        return new Chart(canvasRef.current, {\r\n            type: 'radar',\r\n            data: {\r\n                labels: lables.map(lable => lable.toUpperCase()),\r\n                datasets: [{\r\n                    label: 'Your Music Taste',\r\n                    backgroundColor: 'rgba(30, 215, 96, 0.5)',\r\n                    data: dataPoints\r\n                }]\r\n            },\r\n            options: {\r\n                scale: {\r\n                    pointLabels: {\r\n                        fontColor: scaleColor\r\n                    },\r\n                    angleLines: {\r\n                        color: scaleColor\r\n                    },\r\n                    gridLines: {\r\n                        color: scaleColor\r\n                    },\r\n                    ticks: {\r\n                        backdropColor: 'rgb(0, 0, 0)',\r\n                        fontColor: 'rgb(255, 255, 255)'\r\n                    },\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                legend: {\r\n                    display: false\r\n                }\r\n            }\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        let chart;\r\n        if(accessToken) {\r\n            return averageData().then(({lables, averages}) => {\r\n                chart = makeRadarChart(lables, averages);\r\n                setIsLoading(false)\r\n                return () => chart.destroy()\r\n            });\r\n        }\r\n        else {\r\n            const lables = Object.keys(data).filter(key => {\r\n                if(data[key] < 1 && data[key] > 0) return key;\r\n                return false;\r\n            });\r\n            const values = Object.values(data).filter(value => {\r\n                if(value < 1 && value > 0) return value;\r\n                return false;\r\n            }).map(value => Math.round(value*100))\r\n            chart = makeRadarChart(lables, values); \r\n        }\r\n        setIsLoading(false);\r\n        return () => chart.destroy()\r\n    }, [])\r\n    return (\r\n        <div style={accessToken ? {width: '100vw', height: '50vh', marginTop: '10px'} : {position: 'absolute', top: '10%', width: '100%', height: '60%',background: 'rgba(255,255,255, 0.2)', backdropFilter: 'blur(30px)'}}>\r\n            {isLoading && <div>...Loading</div>}\r\n            <canvas style={accessToken ? {padding: '0 10px'} : {padding: '10px 10px'}} ref={canvasRef}/>\r\n        </div>\r\n    )\r\n}",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":16,"nodeType":"101","messageId":"102","endLine":1,"endColumn":24},{"ruleId":"99","severity":1,"message":"103","line":1,"column":26,"nodeType":"101","messageId":"102","endLine":1,"endColumn":35},{"ruleId":"99","severity":1,"message":"104","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":16},{"ruleId":"99","severity":1,"message":"105","line":37,"column":18,"nodeType":"101","messageId":"102","endLine":37,"endColumn":28},{"ruleId":"99","severity":1,"message":"106","line":37,"column":38,"nodeType":"101","messageId":"102","endLine":37,"endColumn":40},{"ruleId":"107","severity":1,"message":"108","line":41,"column":13,"nodeType":"109","endLine":41,"endColumn":94},{"ruleId":"95","replacedBy":"110"},{"ruleId":"97","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":43,"column":6,"nodeType":"101","endLine":43,"endColumn":18},{"ruleId":"112","severity":1,"message":"114","line":43,"column":6,"nodeType":"101","endLine":43,"endColumn":18,"suggestions":"115"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":16,"nodeType":"101","messageId":"102","endLine":1,"endColumn":24},{"ruleId":"99","severity":1,"message":"103","line":1,"column":26,"nodeType":"101","messageId":"102","endLine":1,"endColumn":35},{"ruleId":"99","severity":1,"message":"104","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":16},{"ruleId":"112","severity":1,"message":"116","line":12,"column":8,"nodeType":"117","endLine":12,"endColumn":17,"suggestions":"118"},{"ruleId":"112","severity":1,"message":"114","line":21,"column":8,"nodeType":"117","endLine":21,"endColumn":15,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":51,"column":1,"nodeType":"122","messageId":"123","endLine":58,"endColumn":2},{"ruleId":"112","severity":1,"message":"124","line":160,"column":8,"nodeType":"117","endLine":160,"endColumn":10,"suggestions":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'render' is defined but never used.","'popularity' is assigned a value but never used.","'id' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["126"],["127"],"react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["128"],"React Hook useEffect has missing dependencies: 'audio' and 'url'. Either include them or remove the dependency array.","ArrayExpression",["129"],["130"],"no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","unexpected","React Hook useEffect has missing dependencies: 'accessToken', 'averageData', 'data', and 'makeRadarChart'. Either include them or remove the dependency array.",["131"],"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [url]",{"range":"140","text":"141"},"Update the dependencies array to be: [audio, playing, url]",{"range":"142","text":"143"},"Update the dependencies array to be: [audio, url]",{"range":"144","text":"145"},"Update the dependencies array to be: [accessToken, averageData, data, makeRadarChart]",{"range":"146","text":"147"},[1239,1251],"[url]",[395,404],"[audio, playing, url]",[664,671],"[audio, url]",[5579,5581],"[accessToken, averageData, data, makeRadarChart]"]
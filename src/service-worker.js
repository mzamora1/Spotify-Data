/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);
console.log("cached static assets")
// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
const limitCacheSize = async (cacheName, size) => {
  const cache = await caches.open(cacheName);
  const keys = await cache.keys();
  if(keys.length > size){
    await cache.delete(keys[0]);
    limitCacheSize(cacheName, size);
  }
  else console.log('done', keys.length);
}
const cacheName = "spotify-assets";

self.addEventListener('fetch', (event) => {
  event.respondWith(async function () {
    const cache = await caches.open(cacheName);
    const match = await cache.match(event.request.clone());
    if(match) {
        return match;
    }
    else {
        const response = await fetch(event.request.clone());
        if(event.request.url.match(/image/)){
          console.log("cached a request")
          limitCacheSize(cacheName, 180)
          cache.put(event.request, response.clone())
        }
        return response;
    }
  }());
})

                // if(event.request.url.match(/top|reccomendations/)){
                //   const res = response;
                //   const json = await res.json();
                //   if(Array.isArray(json.items)) { //for top songs and artsits
                //     console.log(json)
                //     const imageUrls = json.items.map(item => {
                //       return item.album?.images[0].url || item.images[0].url
                //     });
                //     for(const url of imageUrls){
                //       const img = await fetch(url)
                //       if(!await cache.match(url)){
                //         cache.put(url, img);
                //       }
                //     }
                //   }
                //   else if(Array.isArray(json.tracks)){ //for reccomendations
                //     const imageUrls = json.tracks.map(item => item.album.images[0].url);
                //     for(const url of imageUrls){
                //       const img = await fetch(url)
                //       if(!await cache.match(url)){
                //         cache.put(url, img);
                //       }
                //     }
                //   }
                // }